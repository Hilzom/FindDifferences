//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 41 images.
  struct image {
    /// Image `aboutGameIcon`.
    static let aboutGameIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "aboutGameIcon")
    /// Image `clockIcon`.
    static let clockIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "clockIcon")
    /// Image `dark_mode_icon`.
    static let dark_mode_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark_mode_icon")
    /// Image `difference_found`.
    static let difference_found = Rswift.ImageResource(bundle: R.hostingBundle, name: "difference_found")
    /// Image `effect_hand`.
    static let effect_hand = Rswift.ImageResource(bundle: R.hostingBundle, name: "effect_hand")
    /// Image `level_10_bottom`.
    static let level_10_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_10_bottom")
    /// Image `level_10_top`.
    static let level_10_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_10_top")
    /// Image `level_1_bottom_image`.
    static let level_1_bottom_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_1_bottom_image")
    /// Image `level_1_bottom`.
    static let level_1_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_1_bottom")
    /// Image `level_1_top_image`.
    static let level_1_top_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_1_top_image")
    /// Image `level_1_top`.
    static let level_1_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_1_top")
    /// Image `level_2_bottom`.
    static let level_2_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_2_bottom")
    /// Image `level_2_top`.
    static let level_2_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_2_top")
    /// Image `level_3_bottom`.
    static let level_3_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_3_bottom")
    /// Image `level_3_top`.
    static let level_3_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_3_top")
    /// Image `level_4_bottom`.
    static let level_4_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_4_bottom")
    /// Image `level_4_top`.
    static let level_4_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_4_top")
    /// Image `level_5_bottom`.
    static let level_5_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_5_bottom")
    /// Image `level_5_top`.
    static let level_5_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_5_top")
    /// Image `level_6_bottom`.
    static let level_6_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_6_bottom")
    /// Image `level_6_top`.
    static let level_6_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_6_top")
    /// Image `level_7_bottom`.
    static let level_7_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_7_bottom")
    /// Image `level_7_top`.
    static let level_7_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_7_top")
    /// Image `level_8_bottom`.
    static let level_8_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_8_bottom")
    /// Image `level_8_top`.
    static let level_8_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_8_top")
    /// Image `level_9_bottom`.
    static let level_9_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_9_bottom")
    /// Image `level_9_top`.
    static let level_9_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "level_9_top")
    /// Image `missclickIcon`.
    static let missclickIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "missclickIcon")
    /// Image `musicIcon`.
    static let musicIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "musicIcon")
    /// Image `remove_ads_icon`.
    static let remove_ads_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "remove_ads_icon")
    /// Image `restoreIcon`.
    static let restoreIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "restoreIcon")
    /// Image `scrolling_first_frame`.
    static let scrolling_first_frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "scrolling_first_frame")
    /// Image `scrolling_second_frame`.
    static let scrolling_second_frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "scrolling_second_frame")
    /// Image `settings_icon`.
    static let settings_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_icon")
    /// Image `show_ad_icon`.
    static let show_ad_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "show_ad_icon")
    /// Image `soundsIcon`.
    static let soundsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "soundsIcon")
    /// Image `testImgSmall`.
    static let testImgSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "testImgSmall")
    /// Image `testImg`.
    static let testImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "testImg")
    /// Image `theme_0_appstore`.
    static let theme_0_appstore = Rswift.ImageResource(bundle: R.hostingBundle, name: "theme_0_appstore")
    /// Image `tutorialicon`.
    static let tutorialicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorialicon")
    /// Image `vibration_icon`.
    static let vibration_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "vibration_icon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aboutGameIcon", bundle: ..., traitCollection: ...)`
    static func aboutGameIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutGameIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clockIcon", bundle: ..., traitCollection: ...)`
    static func clockIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clockIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark_mode_icon", bundle: ..., traitCollection: ...)`
    static func dark_mode_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark_mode_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "difference_found", bundle: ..., traitCollection: ...)`
    static func difference_found(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.difference_found, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "effect_hand", bundle: ..., traitCollection: ...)`
    static func effect_hand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.effect_hand, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_10_bottom", bundle: ..., traitCollection: ...)`
    static func level_10_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_10_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_10_top", bundle: ..., traitCollection: ...)`
    static func level_10_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_10_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_1_bottom", bundle: ..., traitCollection: ...)`
    static func level_1_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_1_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_1_bottom_image", bundle: ..., traitCollection: ...)`
    static func level_1_bottom_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_1_bottom_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_1_top", bundle: ..., traitCollection: ...)`
    static func level_1_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_1_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_1_top_image", bundle: ..., traitCollection: ...)`
    static func level_1_top_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_1_top_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_2_bottom", bundle: ..., traitCollection: ...)`
    static func level_2_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_2_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_2_top", bundle: ..., traitCollection: ...)`
    static func level_2_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_2_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_3_bottom", bundle: ..., traitCollection: ...)`
    static func level_3_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_3_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_3_top", bundle: ..., traitCollection: ...)`
    static func level_3_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_3_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_4_bottom", bundle: ..., traitCollection: ...)`
    static func level_4_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_4_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_4_top", bundle: ..., traitCollection: ...)`
    static func level_4_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_4_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_5_bottom", bundle: ..., traitCollection: ...)`
    static func level_5_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_5_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_5_top", bundle: ..., traitCollection: ...)`
    static func level_5_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_5_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_6_bottom", bundle: ..., traitCollection: ...)`
    static func level_6_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_6_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_6_top", bundle: ..., traitCollection: ...)`
    static func level_6_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_6_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_7_bottom", bundle: ..., traitCollection: ...)`
    static func level_7_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_7_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_7_top", bundle: ..., traitCollection: ...)`
    static func level_7_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_7_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_8_bottom", bundle: ..., traitCollection: ...)`
    static func level_8_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_8_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_8_top", bundle: ..., traitCollection: ...)`
    static func level_8_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_8_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_9_bottom", bundle: ..., traitCollection: ...)`
    static func level_9_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_9_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "level_9_top", bundle: ..., traitCollection: ...)`
    static func level_9_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.level_9_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "missclickIcon", bundle: ..., traitCollection: ...)`
    static func missclickIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.missclickIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "musicIcon", bundle: ..., traitCollection: ...)`
    static func musicIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.musicIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "remove_ads_icon", bundle: ..., traitCollection: ...)`
    static func remove_ads_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.remove_ads_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "restoreIcon", bundle: ..., traitCollection: ...)`
    static func restoreIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restoreIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scrolling_first_frame", bundle: ..., traitCollection: ...)`
    static func scrolling_first_frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scrolling_first_frame, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scrolling_second_frame", bundle: ..., traitCollection: ...)`
    static func scrolling_second_frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scrolling_second_frame, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_icon", bundle: ..., traitCollection: ...)`
    static func settings_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "show_ad_icon", bundle: ..., traitCollection: ...)`
    static func show_ad_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.show_ad_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "soundsIcon", bundle: ..., traitCollection: ...)`
    static func soundsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.soundsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "testImg", bundle: ..., traitCollection: ...)`
    static func testImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.testImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "testImgSmall", bundle: ..., traitCollection: ...)`
    static func testImgSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.testImgSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "theme_0_appstore", bundle: ..., traitCollection: ...)`
    static func theme_0_appstore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.theme_0_appstore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorialicon", bundle: ..., traitCollection: ...)`
    static func tutorialicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vibration_icon", bundle: ..., traitCollection: ...)`
    static func vibration_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vibration_icon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
